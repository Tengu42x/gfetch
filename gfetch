#!/usr/bin/env python3
import os
import platform
import subprocess
import sys
import getpass
from datetime import timedelta

# Simple color helper with fallback if termcolor not installed
try:
    from termcolor import colored
except ImportError:
    def colored(text, color=None):
        return text  # no color

def try_install(package):
    print(f"Trying to install missing package '{package}'...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--user", package])

try:
    import psutil
except ImportError:
    try:
        try_install("psutil")
        import psutil
    except Exception:
        print("Failed to install 'psutil'. Please install it manually: pip install psutil")
        sys.exit(1)

# ====== ASCII logo fallback ======
def ascii_logo(user, host):
    logo = f"""
  ____   __ __    __
 / ___| / / \\ \\  / /   {user}@{host}
 \\___ \\| |  \\ \\/ /    
  ___) | |___\\  /     
 |____/|_____|\\/      
"""
    return logo

def get_boot_time():
    try:
        output = subprocess.check_output(['systemd-analyze']).decode()
        return output.split('=')[1].strip()
    except Exception:
        return "Unavailable"

def get_gpu_info():
    try:
        output = subprocess.check_output(['lspci']).decode()
        gpus = [l for l in output.splitlines() if 'VGA' in l or '3D controller' in l]
        return ', '.join(gpus) if gpus else "None found"
    except Exception:
        return "Unavailable"

def main():
    user = getpass.getuser()
    hostname = platform.node()

    print(ascii_logo(user, hostname))

    uptime = timedelta(seconds=int(psutil.boot_time()))
    boot_time = get_boot_time()

    info = {
        "OS": f"{platform.system()} {platform.release()}",
        "Uptime": str(timedelta(seconds=int(psutil.time.time() - psutil.boot_time()))),
        "Boot Time": boot_time,
        "CPU": platform.processor(),
        "Memory": f"{psutil.virtual_memory().used // (1024**3)}GB / {psutil.virtual_memory().total // (1024**3)}GB",
        "Disk": f"{psutil.disk_usage('/').used // (1024**3)}GB / {psutil.disk_usage('/').total // (1024**3)}GB",
        "GPU": get_gpu_info(),
        "Processes": len(psutil.pids()),
        "Shell": os.environ.get("SHELL", "Unknown"),
    }

    for k, v in info.items():
        print(f"{k.ljust(12)}: {v}")

if __name__ == "__main__":
    main()
