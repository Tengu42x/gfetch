#!/usr/bin/env python3
import os
import platform
import subprocess
import sys
import getpass
from datetime import timedelta
import shutil

# Simple color helper with fallback if termcolor not installed
try:
    from termcolor import colored
except ImportError:
    def colored(text, color=None):
        return text  # no color

def try_install(package):
    print(f"Trying to install missing package '{package}'...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--user", package])

try:
    import psutil
except ImportError:
    try:
        try_install("psutil")
        import psutil
    except Exception:
        print("Failed to install 'psutil'. Please install it manually: pip install psutil")
        sys.exit(1)

# ====== Themes and Colors ======
THEMES = {
    'dark':   {'border': 'blue', 'logo': 'cyan', 'label': 'green', 'value': 'white'},
    'light':  {'border': 'magenta', 'logo': 'yellow', 'label': 'blue', 'value': 'black'},
    'retro':  {'border': 'red', 'logo': 'yellow', 'label': 'green', 'value': 'blue'},
    'matrix': {'border': 'green', 'logo': 'green', 'label': 'cyan', 'value': 'white'},
}

# ====== ASCII logo with border ======
def ascii_logo(user, host, theme):
    logo = f"""
 ______   _       _              _ 
|  ___| | |     | |            | |
| |_ ___| |_ ___| |__   ___  __| |
|  _/ _ \\ __/ __| '_ \\ / _ \\/ _` |
| ||  __/ || (__| | | |  __/ (_| |
\\_| \\___|\\__\\___|_| |_|\\___|\\__,_|
                                  
      {user}@{host}
"""
    border = "═" * (len(logo.splitlines()[0]) + 2)  # width of the first line
    return f"{colored(border, theme['border'])}\n{colored(logo, theme['logo'])}\n{colored(border, theme['border'])}"

def get_boot_time():
    # Check if systemd is available before attempting to use systemd-analyze
    if shutil.which("systemd-analyze"):
        try:
            output = subprocess.check_output(['systemd-analyze']).decode()
            return output.split('=')[1].strip()
        except Exception:
            return "Unavailable"
    else:
        return "Systemd not available"

def get_gpu_info():
    try:
        output = subprocess.check_output(['lspci']).decode()
        gpus = [l for l in output.splitlines() if 'VGA' in l or '3D controller' in l]
        return ', '.join(gpus) if gpus else "None found"
    except Exception:
        return "Unavailable"

# ====== Main Function to Display Info ======
def main():
    user = getpass.getuser()
    hostname = platform.node()

    # Choose theme (default to 'dark')
    theme_choice = 'dark'  # You can change this or allow it as a user input
    theme = THEMES.get(theme_choice, THEMES['dark'])

    # Get the ASCII logo with user and hostname
    logo = ascii_logo(user, hostname, theme)

    # System info collection
    uptime = timedelta(seconds=int(psutil.boot_time()))
    boot_time = get_boot_time()

    info = {
        "OS": f"{platform.system()} {platform.release()}",
        "Uptime": str(timedelta(seconds=int(psutil.time.time() - psutil.boot_time()))),
        "Boot Time": boot_time,
        "CPU": platform.processor(),
        "Memory": f"{psutil.virtual_memory().used // (1024**3)}GB / {psutil.virtual_memory().total // (1024**3)}GB",
        "Disk": f"{psutil.disk_usage('/').used // (1024**3)}GB / {psutil.disk_usage('/').total // (1024**3)}GB",
        "GPU": get_gpu_info(),
        "Processes": len(psutil.pids()),
        "Shell": os.environ.get("SHELL", "Unknown"),
    }

    # Formatting the content with a nice border around everything
    border_length = 60  # You can adjust this for different width
    border = colored("═" * border_length, theme['border'])
    content = "\n".join([f"{colored(k.ljust(12), theme['label'])}: {colored(v, theme['value'])}" for k, v in info.items()])
    
    # Print the full bordered output
    print(f"{border}\n{logo}\n{border}\n\n{content}\n{border}")

if __name__ == "__main__":
    main()
